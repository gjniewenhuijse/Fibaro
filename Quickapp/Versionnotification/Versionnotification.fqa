{"name":"Notification","type":"com.fibaro.genericDevice","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_352"},"sections":{"items":[]}},"head":{"title":"quickApp_device_352"}}},"uiCallbacks":[],"quickAppVariables":[],"typeTemplateInitialized":true},"initialInterfaces":[],"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- STEP 1: \n--   Create a JSON file public available on the Internet\n--   For example at GitHub. Use the GitHub RAW link that doesn't need a token, like:\n--    https://raw.githubusercontent.com/username/repository/folder/file.json\n--   \n--   Your JSON looks like:\n--   [\n--     {\n--       \"name\": \"QANOTIFYEXAMPLE\",\n--       \"version\": \"1.0\",\n--       \"changelog\": \"Chuck Norris doesn't change code. He stares them down until he gets the Quick App he wants.\"\n--     },\n--     {\n--       \"name\": \"MYFIRSTQA\",\n--       \"version\": \"1.1\",\n--       \"changelog\": \"Chuck Norris can divide by zero.\"\n--     }\n--   ]\n--\n-- STEP 2:\n--   Add these variables to the top of your Quick App:\n--     __TAG = \"QANOTIFYEXAMPLE\" .. plugin.mainDeviceId\n--     _VERSION = \"1.0\"\n--\n-- STEP 3:\n--   The code below is a minimal Quick App that checks for updates from your Internet source.\n\n__TAG = \"QANOTIFYEXAMPLE\" .. plugin.mainDeviceId\n_VERSION = \"1.0\"\n_UPDATEPRIORITY = \"info\"\n_UPDATESERVICEURL = \"https://raw.githubusercontent.com/username/repository/folder/file.json\"\n\nfunction QuickApp:setNotification(updateVersion, changelog)\n    local notifications = api.get(\"/notificationCenter\")\n    local alreadyNotified = false\n    for _, notification in ipairs(notifications) do\n        if notification.data.deviceId == self.id then\n            alreadyNotified = true\n        end\n    end\n    if not alreadyNotified then\n        local notification = {\n            priority = _UPDATEPRIORITY,\n            type = \"GenericDeviceNotification\",\n            data = {\n                deviceId = self.id,\n                title = \"Update beschikbaar\", --self.lang.qaUpdateAvailable\n                text = string.format(\"Update %s beschikbaar %s\", updateVersion, changelog), --self.lang.qaUpdateMessage\n                name = __TAG,\n            }\n        }\n        api.post(\"/notificationCenter\", notification)\n    end\nend\n\nfunction QuickApp:checkForAvailableUpdate()\nself:setNotification(\"1.1\", \"blablabla\")\n--[[\n    self.http:request(_UPDATESERVICEURL, {\n        options = {\n            headers = { Accept = \"application/json\" },\n            method = 'GET'\n        },\n        success = function(response)\n            if response.status == 200 then\n                local qaUpdates = json.decode(response.data)\n                for _,qa in ipairs(qaUpdates) do\n                    if string.find(__TAG, qa.name) then\n                        if  _VERSION ~= qa.version then\n                            self:setNotification(qa.version, qa.changelog)\n                        end\n                    end\n                end\n            else\n                self:warning(\"Cannot connect to the update server!\")\n            end\n        end\n        ,\n        error = function(message)\n            self:warning(\"Cannot connect to the update server!\")\n        end\n    })\n    ]]\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"Test notification example v\" .. _VERSION)\n    self.http = net.HTTPClient({ timeout = 5000 })\n    self:checkForAvailableUpdate()\nend"}]}
